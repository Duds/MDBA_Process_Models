---
description: 
globs: 
alwaysApply: false
---
---
description: BPMN AI-to-Camunda Workflow Best Practices
globs: ["**/*.bpmn"]
alwaysApply: true
related_docs: [".cursor/rules/bpmn-logical-process-rules.mdc", ".cursor/rules/bpmn-diagram-coordinates-rules.mdc"]
---
# BPMN AI-to-Camunda Workflow Best Practices

@context {
    "type": "workflow",
    "purpose": "bpmn_standards",
    "format_version": "1.0.0",
    "target_users": [
        "process_designers",
        "developers",
        "data_scientists"
    ]
}

Guidelines for efficiently working with BPMN files generated by AI and refined in Camunda Modeler.

@workflow_phases {
    "generation": {
        "description": "Creating initial BPMN models using AI",
        "tools": ["Generative AI", "LLMs", "Code generation"],
        "focus": "Logical structure and connections"
    },
    "validation": {
        "description": "Validating AI-generated BPMN before Camunda import",
        "tools": ["npm run validate", "XML validation", "Manual review"],
        "focus": "Schema compliance and logical coherence"
    },
    "refinement": {
        "description": "Importing to Camunda and refining",
        "tools": ["Camunda Modeler", "Manual editing"],
        "focus": "Visual layout and additional properties"
    },
    "versioning": {
        "description": "Maintaining versions in git",
        "tools": ["Git", "Conventional commits"],
        "focus": "Clear change tracking and collaboration"
    }
}

<rule>
name: bpmn_ai_to_camunda_workflow
description: Workflow guidelines for AI-generated BPMN files that will be refined in Camunda
filters:
  - type: file_extension
    pattern: "\\.bpmn$"

actions:
  - type: suggest
    message: |
      ## BPMN AI-to-Camunda Workflow Best Practices

      ### Generate → Validate → Refine Workflow
      
      1. **AI Generation Phase**
         - Generate logical process structure first
         - Focus on correct elements and connections
         - Ensure all elements have unique IDs
         - Include proper documentation
      
      2. **Pre-Camunda Validation**
         - Run validation: `npm run validate`
         - Fix any XML schema errors
         - Check for disconnected elements
         - Ensure all element references are valid
      
      3. **Camunda Refinement**
         - Import to Camunda for visual refinement
         - Let Camunda regenerate layout naturally
         - Manually adjust positioning for clarity
         - Add detailed properties in Camunda
      
      ### Common AI-to-Camunda Issues
      
      - **Duplicate IDs**: AI may generate non-unique IDs
         ```xml
         <!-- Fix this before importing to Camunda -->
         <bpmn:task id="Task_123" name="First Task" />
         <bpmn:task id="Task_123" name="Second Task" /> <!-- Duplicate ID! -->
         ```
      
      - **Missing Diagram Elements**: Ensure each process element has a corresponding diagram shape
      
      - **Broken References**: Check that all `sourceRef` and `targetRef` attributes refer to existing elements
      
      - **Missing Labels**: Add labels for gateways and conditional flows
      
      - **Camunda Properties**: Add Camunda-specific properties in Modeler after import:
         ```xml
         <bpmn:userTask id="Task_Review" name="Review Application" camunda:assignee="${reviewer}" />
         ```
      
      ### Best Workflow Patterns
      
      1. Start with a simple process skeleton via AI
      2. Validate XML before importing
      3. Import to Camunda for initial layout
      4. Export and version control the base version
      5. Continue refinement in Camunda
      6. Document changes in commit messages
      
      ### Version Control Tips
      
      - Commit logical process changes separately from visual/layout changes
      - Use descriptive commit messages: "Add approval process logic" vs "Adjust layout"
      - When making significant changes, create a new draft version
      - Review XML diffs to understand what Camunda has changed

examples:
  - input: |
      # AI-generated BPMN file with basic process
      <bpmn:process id="Process_1" name="Simple Process">
        <bpmn:startEvent id="StartEvent_1" />
        <bpmn:task id="Task_1" name="Do Something" />
        <bpmn:endEvent id="EndEvent_1" />
        <!-- Missing sequence flows -->
      </bpmn:process>
    output: |
      # Properly prepared for Camunda
      <bpmn:process id="Process_OrderFulfillment" name="Order Fulfillment Process" isExecutable="true">
        <bpmn:startEvent id="StartEvent_NewOrder" name="New Order Received" />
        <bpmn:userTask id="Task_VerifyOrder" name="Verify Order Details" />
        <bpmn:endEvent id="EndEvent_OrderFulfilled" name="Order Fulfilled" />
        <bpmn:sequenceFlow id="Flow_ToVerify" sourceRef="StartEvent_NewOrder" targetRef="Task_VerifyOrder" />
        <bpmn:sequenceFlow id="Flow_ToEnd" sourceRef="Task_VerifyOrder" targetRef="EndEvent_OrderFulfilled" />
      </bpmn:process>
      <!-- Complete with proper diagram elements for each process element -->

metadata:
  priority: high
  version: 1.0
  ai_workflow: true
  camunda_compatible: true
</rule>

@common_issues [
    {
        "id": "duplicate_ids",
        "description": "AI models often generate duplicate IDs for different elements",
        "detection": "XML validation errors, Camunda import failures",
        "resolution": "Ensure unique IDs across all elements before importing"
    },
    {
        "id": "disconnected_elements",
        "description": "Missing sequence flows between elements",
        "detection": "Visual inspection, Camunda validation warnings",
        "resolution": "Add proper sequence flows with sourceRef and targetRef"
    },
    {
        "id": "invalid_expressions",
        "description": "Condition expressions that don't follow Camunda syntax",
        "detection": "Camunda runtime errors",
        "resolution": "Adjust to follow ${expression} format with proper JavaScript syntax"
    },
    {
        "id": "missing_diagram_elements",
        "description": "Process elements without corresponding diagram elements",
        "detection": "Invisible or missing elements in Camunda",
        "resolution": "Add BPMNShape or BPMNEdge elements for each process element"
    }
]

@validation {
    "required": [
        "All element IDs must be unique",
        "All elements must be connected with sequence flows",
        "All referenced elements must exist",
        "XML must be well-formed and valid"
    ],
    "recommended": [
        "Run npm validation before Camunda import",
        "Version control base version before detailed editing",
        "Document AI generation prompts for reproducibility",
        "Follow naming conventions even in AI-generated content"
    ]
}

@version "1.0.1"
@last_updated "2024-07-26"
